[[modules-threadpool]]
== Thread Pool

A node holds several thread pools in order to improve how threads memory consumption
are managed within a node. Many of these pools also have queues associated with them,
which allow pending requests to be held instead
of discarded.


There are several thread pools, but the important ones include:

[horizontal]
`index`::
    For index/delete operations. Defaults to `fixed`
    with a size of `# of available processors`,
    queue_size of `200`.

`search`::
    For count/search operations. Defaults to `fixed`
    with a size of `3x # of available processors`,
    queue_size of `1000`.

`suggest`::
    For suggest operations. Defaults to `fixed`
    with a size of `# of available processors`,
    queue_size of `1000`.

`get`::
    For get operations. Defaults to `fixed`
    with a size of `# of available processors`,
    queue_size of `1000`.

`bulk`::
    For bulk operations. Defaults to `fixed`
    with a size of `# of available processors`,
    queue_size of `50`.

`percolate`::
    For percolate operations. Defaults to `fixed`
    with a size of `# of available processors`,
    queue_size of `1000`.

`snapshot`::
    For snapshot/restore operations. Defaults to `scaling`,
    keep-alive `5m` with a size of `(# of available processors)/2`.

`warmer`::
    For segment warm-up operations. Defaults to `scaling`
    with a `5m` keep-alive.

`refresh`::
    For refresh operations. Defaults to `scaling`
    with a `5m` keep-alive.

`listener`::
    Mainly for java client executing of action when listener threaded is set to true.
    Default size of `(# of available processors)/2`, max at 10.

Changing a specific thread pool can be done by setting its type and
specific type parameters, for example, changing the `index` thread pool
to have more threads:

[source,js]
--------------------------------------------------
threadpool:
    index:
        type: fixed
        size: 30
--------------------------------------------------

NOTE: you can update threadpool settings live using
      <<cluster-update-settings>>.


[float]
[[types]]
=== Thread pool types

The following are the types of thread pools that can be used and their
respective parameters:

[float]
==== `cache`

The `cache` thread pool is an unbounded thread pool that will spawn a
thread if there are pending requests. Here is an example of how to set
it:

[source,js]
--------------------------------------------------
threadpool:
    index:
        type: cached
--------------------------------------------------

[float]
==== `fixed`

The `fixed` thread pool holds a fixed size of threads to handle the
requests with a queue (optionally bounded) for pending requests that
have no threads to service them.

The `size` parameter controls the number of threads, and defaults to the
number of cores times 5.

The `queue_size` allows to control the size of the queue of pending
requests that have no threads to execute them. By default, it is set to
`-1` which means its unbounded. When a request comes in and the queue is
full, it will abort the request.

[source,js]
--------------------------------------------------
threadpool:
    index:
        type: fixed
        size: 30
        queue_size: 1000
--------------------------------------------------

[float]
[[processors]]
=== Processors setting
The number of processors is automatically detected, and the thread pool
settings are automatically set based on it. Sometimes, the number of processors
are wrongly detected, in such cases, the number of processors can be
explicitly set using the `processors` setting.  The example below sets
the number of processors to 4, which means that the default search thread pool size
is 4 x 3 = 12.

[source,js]
--------------------------------------------------
processors: 4
--------------------------------------------------

This setting is important when running multiple node instances on a single 
bare-metal machine.  Each node will detect that it has the full number of 
processors.  But in reality, they are sharing processors on the single machine.  
In other words, it is advised to lower the `processors` setting accordingly.  For example,
on a 24 core machine and running 3 nodes, set processors to 8.

In order to check the number of processors detected, use the nodes info
API with the `os` flag.
